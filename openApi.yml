openapi: "3.0.1"
info:
  title: "unforcedPB"
  version: "1.0.0"
servers:
  - url: "https://api.unforcedpickleball.com"
paths:
  /clips:
    get:
      operationId: "getClips"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Clips"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:360249479933:function:unforcedPB/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
    post:
      operationId: "createClip"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Clip"
        required: true
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Clip"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:360249479933:function:unforcedPB/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: { }
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-firebase-token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /clips/{id}:
    delete:
      operationId: "deleteClip"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "200 response"
          content: { }
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:360249479933:function:unforcedPB/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /external-match-upload:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExternalMatch"
        required: true
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Match"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:360249479933:function:unforcedPB/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: { }
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-firebase-token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /feed-image-banners:
    get:
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/FeedItemBanner"
        "403":
          description: "403 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:360249479933:function:unforcedPB/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImageBannerInput"
        required: true
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedItemBanner"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:360249479933:function:unforcedPB/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: { }
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-firebase-token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /feed-image-banners/{id}:
    put:
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FeedItemBanner"
        required: true
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedItemBanner"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: "403 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "404 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:360249479933:function:unforcedPB/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
    delete:
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "204 response"
          content: { }
        "403":
          description: "403 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: "404 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:360249479933:function:unforcedPB/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
    options:
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: { }
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-firebase-token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /feed-items:
    get:
      operationId: "getFeedItems"
      parameters:
        - name: "after_timestamp"
          in: "query"
          schema:
            type: "string"
            format: "datetime"
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedItemsPage"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:360249479933:function:unforcedPB/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /leaderboard:
    get:
      operationId: "getLeaderboard"
      parameters:
        - name: "since"
          in: "query"
          schema:
            type: "string"
            format: "date"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Leaderboard"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:360249479933:function:unforcedPB/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /matches:
    get:
      operationId: "getMatches"
      parameters:
        - name: "include_solo"
          in: "query"
          schema:
            type: "boolean"
      responses:
        "401":
          description: "401 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Matches"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:360249479933:function:unforcedPB/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
    post:
      operationId: "createMatch"
      parameters:
        - name: "invite_unregistered_players"
          in: "query"
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Match"
        required: true
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Match"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: "401 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:360249479933:function:unforcedPB/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: { }
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-firebase-token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /matches/{id}:
    delete:
      operationId: "deleteMatch"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "404":
          description: "404 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: "401 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "204":
          description: "204 response"
          content: { }
        "403":
          description: "403 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:360249479933:function:unforcedPB/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /matches/{id}/details:
    get:
      operationId: "getMatchDetails"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatchDetails"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:360249479933:function:unforcedPB/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /matches/{id}/invite:
    post:
      operationId: "invitePlayersToMatch"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvitePlayersInput"
        required: true
      responses:
        "200":
          description: "200 response"
          content: { }
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: "401 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:360249479933:function:unforcedPB/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /players:
    get:
      operationId: "getPlayers"
      parameters:
        - name: "include_owners"
          in: "query"
          schema:
            type: "string"
        - name: "player_ids"
          in: "query"
          schema:
            type: "string"
        - name: "filter_term"
          in: "query"
          schema:
            type: "string"
      responses:
        "401":
          description: "401 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Players"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:360249479933:function:unforcedPB/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
    post:
      operationId: "createPlayer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Player"
        required: true
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Player"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: "401 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:360249479933:function:unforcedPB/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: { }
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-firebase-token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /players/{id}:
    put:
      operationId: "editPlayer"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "include_color_overrides"
          in: "query"
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Player"
        required: true
      responses:
        "404":
          description: "404 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Player"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: "401 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: "403 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:360249479933:function:unforcedPB/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
    delete:
      operationId: "deletePlayer"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "404":
          description: "404 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: "401 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "204":
          description: "204 response"
          content: { }
        "403":
          description: "403 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:360249479933:function:unforcedPB/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /stats:
    get:
      operationId: "getStats"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatsResponse"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:360249479933:function:unforcedPB/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
  /users:
    get:
      operationId: "getUser"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:360249479933:function:unforcedPB/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
    delete:
      responses:
        "200":
          description: "200 response"
          content: { }
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:360249479933:function:unforcedPB/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: { }
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-firebase-token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /video-upload-requests:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VideoUploadRequest"
        required: true
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoUploadRequest"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:360249479933:function:unforcedPB/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
components:
  schemas:
    Clip:
      properties:
        player_ids:
          type: "array"
          items:
            type: "string"
        match_id:
          type: "string"
        shot_type:
          $ref: "#/components/schemas/ShotType"
        shot_result:
          $ref: "#/components/schemas/ShotResult"
        shot_side:
          $ref: "#/components/schemas/ShotSide"
        clip_url:
          type: "string"
        description:
          type: "string"
        public:
          type: "boolean"
      required:
        - "clip_url"
    Clips:
      type: "array"
      items:
        $ref: "#/components/schemas/Clip"
    Error:
      required:
        - "code"
        - "message"
      type: "object"
      properties:
        code:
          type: "integer"
          format: "int32"
        message:
          type: "string"
    ExternalMatch:
      type: object
      properties:
        json:
          type: string
    FeedItem:
      type: "object"
      properties:
        banner:
          $ref: "#/components/schemas/FeedItemBanner"
        clip:
          $ref: "#/components/schemas/Clip"
    FeedItemBanner:
      type: "object"
      properties:
        id:
          type: "string"
        upload_date:
          type: "string"
          format: "datetime"
        image_url:
          type: "string"
        details_url:
          type: "string"
    FeedItemsPage:
      type: "object"
      properties:
        items:
          type: "array"
          items:
            $ref: "#/components/schemas/FeedItem"
        page_data:
          $ref: "#/components/schemas/PageData"
    GameScore:
      required:
        - "team1_score"
        - "team2_score"
      type: "object"
      properties:
        team1_score:
          type: "integer"
          format: "int64"
        team2_score:
          type: "integer"
          format: "int64"
    ImageBannerInput:
      type: "object"
      properties:
        image_url:
          type: "string"
        details_url:
          type: "string"
        upload_date:
          type: "string"
          format: "datetime"
    InvitePlayersInput:
      type: "object"
      properties:
        players:
          type: "array"
          items:
            $ref: "#/components/schemas/InvitePlayersInputPlayer"
    InvitePlayersInputPlayer:
      type: "object"
      properties:
        player_id:
          type: "string"
        email:
          type: "string"
    LeaderboardPlayer:
      required:
        - "player_id"
        - "first_name"
        - "last_name"
      type: "object"
      properties:
        player_id:
          type: "string"
        first_name:
          type: "string"
        last_name:
          type: "string"
        image_url:
          type: "string"
        color_override:
          type: "string"
        overall_player_impact:
          type: "number"
    Leaderboard:
      type: "array"
      items:
        $ref: "#/components/schemas/LeaderboardPlayer"
    Matches:
      type: "array"
      items:
        $ref: "#/components/schemas/Match"
    Match:
      required:
        - "match_id"
        - "user_id"
        - "date"
        - "scores"
        - "team1"
        - "team2"
        - "can_be_deleted"
      type: "object"
      properties:
        match_id:
          type: "string"
        user_id:
          type: "string"
        date:
          type: "string"
        team1:
          type: "array"
          items:
            $ref: "#/components/schemas/Player"
        team2:
          type: "array"
          items:
            $ref: "#/components/schemas/Player"
        scores:
          type: "array"
          items:
            $ref: "#/components/schemas/GameScore"
        stats:
          type: "array"
          items:
            $ref: "#/components/schemas/Stat"
        can_be_deleted:
          type: "boolean"
        external_stats_url:
          type: "string"
    MatchDetails:
      type: "object"
      properties:
        overview_data:
          $ref: "#/components/schemas/MatchDetailsOverview"
        clips_data:
          $ref: "#/components/schemas/MatchDetailsClips"
    MatchDetailsOverview:
      type: "object"
      properties:
        game_score_flows:
          type: "array"
          items:
            $ref: "#/components/schemas/MatchDetailsScoreFlow"
    MatchDetailsClips:
      type: "object"
      properties:
        clips:
          type: "array"
          items:
            $ref: "#/components/schemas/Clip"
    MatchDetailsScoreFlow:
      type: "object"
      properties:
        game_index:
          type: "integer"
        team1_points:
          type: "array"
          items:
            type: "integer"
        team2_points:
          type: "array"
          items:
            type: "integer"
    MatchPlayerImpact:
      properties:
        date:
          type: "string"
          format: "datetime"
        player_impact:
          type: "number"
      required:
        - date
        - player_impact
    MatchUnforcedErrors:
      properties:
        average:
          type: "number"
        match_values:
          type: array
          items:
            $ref: "#/components/schemas/MatchUnforcedErrorValue"
    MatchUnforcedErrorValue:
      properties:
        date:
          type: "string"
          format: "datetime"
        value:
          type: "number"
    PageData:
      type: "object"
      properties:
        last_page:
          type: "boolean"
        last_timestamp:
          type: "string"
    Players:
      type: "array"
      items:
        $ref: "#/components/schemas/Player"
    Player:
      required:
        - "first_name"
        - "image_url"
        - "last_name"
        - "player_id"
        - "is_owner"
        - "owner_user_id"
      type: "object"
      properties:
        player_id:
          type: "string"
        owner_user_id:
          type: "string"
        first_name:
          type: "string"
        last_name:
          type: "string"
        image_url:
          type: "string"
        dominant_hand:
          type: "string"
          enum:
            - "RIGHT"
            - "LEFT"
        notes:
          type: "string"
        phone_number:
          type: "string"
        email:
          type: "string"
        level:
          type: "number"
          format: "double"
        is_owner:
          type: "boolean"
        is_favorite:
          type: "boolean"
        color_override:
          type: "string"
    ShotResult:
      type: "string"
      enum:
        - "WINNER"
        - "ERROR"
    ShotSide:
      type: "string"
      enum:
        - "FOREHAND"
        - "BACKHAND"
    ShotType:
      type: "string"
      enum:
        - "SERVE"
        - "DROP"
        - "DINK"
        - "DRIVE"
        - "VOLLEY"
        - "LOB"
        - "OVERHEAD"
        - "KITCHEN"
        - "ERNE"
        - "ATP"
    Stat:
      required:
        - "player_id"
        - "game_index"
        - "shot_result"
      type: "object"
      properties:
        player_id:
          type: "string"
        game_index:
          type: "integer"
          format: "int64"
        shot_result:
          $ref: "#/components/schemas/ShotResult"
        shot_type:
          $ref: "#/components/schemas/ShotType"
        shot_side:
          $ref: "#/components/schemas/ShotSide"
        team1_score:
          type: "integer"
        team2_score:
          type: "integer"
    StatsResponse:
      properties:
        player:
          $ref: "#/components/schemas/StatsResponsePlayer"
        mpis:
          type: array
          items:
            $ref: "#/components/schemas/MatchPlayerImpact"
        unforced_errors:
          $ref: "#/components/schemas/MatchUnforcedErrors"
        shot_side_result_percentages:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: number
        shot_type_result_counts:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: number
    StatsResponsePlayer:
      properties:
        first_name:
          type: "string"
        last_name:
          type: "string"
        image_url:
          type: "string"
        color_override:
          type: "string"
        overall_player_impact:
          type: "number"
    User:
      properties:
        user_id:
          type: "string"
        first_name:
          type: "string"
        last_name:
          type: "string"
        email_address:
          type: "string"
        admin:
          type: "boolean"
    VideoUploadRequest:
      type: "object"
      properties:
        players:
          type: "array"
          items:
            $ref: "#/components/schemas/VideoUploadPlayer"
        video_url:
          type: "string"
        selected_offerings:
          type: "array"
          items:
            $ref: "#/components/schemas/VideoUploadOffering"
        clips_can_be_public:
          type: "boolean"
    VideoUploadPlayer:
      type: "object"
      properties:
        player_id:
          type: "string"
        description:
          type: "string"
    VideoUploadOffering:
      type: "string"
      enum:
        - "BASIC_STAT_TRACKING"
        - "ADVANCED_STAT_TRACKING"